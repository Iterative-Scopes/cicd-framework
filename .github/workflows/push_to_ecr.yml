# To use this workflow, you will need to complete the following set-up steps:
#
# Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.

name: Build & Push Docker Image to Amazon ECR using AWS OIDC IAM Role

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      ROLE_ARN:
        required: true
        type: string
      SECRET_ID:
        required: true
        type: string  

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Configure AWS credentials
      id: aws-configure
      env:
        AWS_ROLE_ARN: ${{ ROLE_ARN }}
        AWS_DEFAULT_REGION: ${{ AWS_REGION }}
      
      run: |
        export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
        curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
    
    - name: Retrieve Secrets
      id: secrets
      uses: t-botz/aws-secrets-manager-read-action@v2
      with:
        secret-id: $SECRET_ID    
        mask-values: true
        keys-as-env-vars: true
        keys-as-outputs: true
        append-to-env-file: ./my.env
       
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.GITHUB_REF_SLUG }}.${{ env.GITHUB_SHA_SHORT }}
        GH_ACCESSTOKEN_SECRET: ${{ steps.secrets.outputs.gh_token }}

      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg GH_ACCESSTOKEN_DOCKER=$GH_ACCESSTOKEN_SECRET . 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
