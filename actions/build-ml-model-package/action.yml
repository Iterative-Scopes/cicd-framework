name: build ML model container(s)
description: build ML model container

inputs:
  profile:
    description: ci/cd profile 
    required: true

outputs:
  package_ref:
    description: ML model package ref
    value: ${{ steps.set-pkg-ref.outputs.package_ref }}

runs:
    using: "composite"
    steps: 
    - name: Get given application settings
      id: app_settings
      uses: Iterative-Scopes/cicd-framework/actions/cicdcfg@main
      with:
        env: dev
        role: build
        profile: ${{ inputs.profile }}
    
    - name: Configure AWS credentials
      id: aws-configure
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ steps.app_settings.outputs.aws_account }}:role/${{ steps.app_settings.outputs.aws_role }}
        role-duration-seconds: ${{ steps.app_settings.outputs.aws_role_duration }}
        aws-region: ${{ steps.app_settings.outputs.aws_region }}
        audience: ${{ steps.app_settings.outputs.aws_audience }}

    - name: Push ML model container to ECR
      id: push-ecr
      if: ${{ steps.app_settings.outputs.app_registry == 'ecr' }}
      uses: Iterative-Scopes/cicd-framework/actions/build-ecr-image@ISOPS-548
      with:
        aws_region: ${{ steps.app_settings.outputs.aws_region }}
        repository: ${{ steps.app_settings.outputs.app_repository }}

    - name: Get given application settings for prod
      id: app_settings_prod
      uses: Iterative-Scopes/cicd-framework/actions/cicdcfg@main
      with:
        env: prod
        role: build
        profile: ${{ inputs.profile }}

    - name: Configure AWS credentials for prod
      id: aws-configure_prod
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ steps.app_settings_prod.outputs.aws_account }}:role/${{ steps.app_settings_prod.outputs.aws_role }}
        role-duration-seconds: ${{ steps.app_settings_prod.outputs.aws_role_duration }}
        aws-region: ${{ steps.app_settings_prod.outputs.aws_region }}
        audience: ${{ steps.app_settings_prod.outputs.aws_audience }}    
    
    - name: Login to Amazon ECR
      id: login-ecr-prod
      uses: aws-actions/amazon-ecr-login@v1
      env: 
        AWS_REGION: ${{ steps.app_settings_prod.outputs.aws_region }}
    
    - name: Tag, and push image to Amazon ECR
      id: ecr-image-prod
      env:
        REMOTE_REGISTRY: ${{ steps.login-ecr-prod.outputs.registry }}/${{ steps.app_settings_prod.outputs.app_repository }}
        IMAGE_TAG: ${{ github.ref_name }}

      shell: bash
      run: |
        docker image ls
        docker image tag upper-lower-gi-cpu $REMOTE_REGISTRY:$IMAGE_TAG-cpu
        docker image tag upper-lower-gi-gpu $REMOTE_REGISTRY:$IMAGE_TAG-gpu
        docker push $REMOTE_REGISTRY:$IMAGE_TAG-cpu
        echo "set output tag ["$IMAGE_TAG"]"
        echo "::set-output name=tag::"$IMAGE_TAG""
        docker push $REMOTE_REGISTRY:$IMAGE_TAG-gpu
        echo "set output tag ["$IMAGE_TAG"]"
        echo "::set-output name=tag::"$IMAGE_TAG""

    - name: Get given application settings
      id: app_settings_phi
      uses: Iterative-Scopes/cicd-framework/actions/cicdcfg@main
      with:
        env: phi
        role: build
        profile: ${{ inputs.profile }}

    - name: Configure AWS credentials
      id: aws-configure-phi
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ steps.app_settings_phi.outputs.aws_account }}:role/${{ steps.app_settings_phi.outputs.aws_role }}
        role-duration-seconds: ${{ steps.app_settings_phi.outputs.aws_role_duration }}
        aws-region: ${{ steps.app_settings_phi.outputs.aws_region }}
        audience: ${{ steps.app_settings_phi.outputs.aws_audience }}    
    
    - name: Login to Amazon ECR
      id: login-ecr-phi
      uses: aws-actions/amazon-ecr-login@v1
      env: 
        AWS_REGION: ${{ steps.app_settings_phi.outputs.aws_region }} 
    
    - name: Tag, and push image to Amazon ECR
      id: ecr-image-phi
      env:
        REMOTE_REGISTRY: ${{ steps.login-ecr-phi.outputs.registry }}/${{ steps.app_settings_phi.outputs.app_repository }}
        IMAGE_TAG: ${{ github.ref_name }}

      shell: bash
      run: |
        docker image ls
        docker image tag upper-lower-gi-cpu $REMOTE_REGISTRY:$IMAGE_TAG-cpu
        docker image tag upper-lower-gi-gpu $REMOTE_REGISTRY:$IMAGE_TAG-gpu
        docker push $REMOTE_REGISTRY:$IMAGE_TAG-cpu
        echo "set output tag ["$IMAGE_TAG"]"
        echo "::set-output name=tag::"$IMAGE_TAG""
        docker push $REMOTE_REGISTRY:$IMAGE_TAG-gpu
        echo "set output tag ["$IMAGE_TAG"]"
        echo "::set-output name=tag::"$IMAGE_TAG""
        
    - name: Set package ref
      id: set-pkg-ref
      shell: bash
      run: |
          if [ ${{ steps.build-ecr.outputs.tag }} ];
          then 
            echo "::set-output name=package_ref::${{ steps.build-ecr.outputs.tag }}"
            exit 0
          fi;
          if [ ${{ steps.build-zip.outputs.zip_uri }} ]
          then
             echo "::set-output name=package_ref::${{ steps.build-zip.outputs.zip_uri }}"
             exit 0
          fi;
          echo "::error::missing package ref in building app [ ${{ steps.app_settings.outputs.app_name }}]
          exit 128
        