name: deploy lambda
description: update lambda with container, S3 or zip 

inputs:
  env:
    description: environment hosting lambda 
    required: true
  lambda: 
    description: lambda name
    required: true
  package_ref: 
    description: lambda package ref from lambda build job
    required: true

runs:
    using: "composite"
    steps: 
      - name: Get given application settings
        id: app_settings
        uses: Iterative-Scopes/cicd-framework/actions/cicdcfg@ISOPS-533-aws-settings
        with:
          env: ${{ inputs.env }}
          role: deploy
          profile: ${{ inputs.profile }}
      - name: Configure AWS credentials
        id: aws-configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ steps.app_settings.outputs.aws_account }}:role/${{ steps.app_settings.outputs.aws_role }}
          role-duration-seconds: ${{ steps.app_settings.outputs.aws_role_duration }}
          aws-region: ${{ steps.app_settings.outputs.aws_region }}
          audience: ${{ steps.app_settings.outputs.aws_audience }}

      - name: update container lambda - get image uri with given image tag
        if: ${{ steps.app_settings.outputs.app_registry == 'ecr' }}
        uses: Iterative-Scopes/cicd-framework/actions/get-ecr-image-uri@main
        id: get-image-uri
        with: 
          aws_region: ${{ steps.app_settings.outputs.aws_region }}
          ecr_repository: ${{ steps.app_settings.outputs.app_repository }}
          image_tag: ${{ inputs.package_ref }} 

      - name: update container lambda - update lambda with image uri
        if: ${{ steps.get-image-uri.outputs.uri }}
        shell: bash
        run: |
          echo ${{ steps.get-image-uri.outputs.uri }}
          aws lambda update-function-code --function-name ${{ inputs.lambda }} --image-uri ${{ steps.get-image-uri.outputs.uri }}
  
      - name: update lambda with S3
        if: ${{ inputs.s3_uri }}
        shell: bash
        run: |
          echo "update lambda with [${{ inputs.s3_uri }}] --- coming soon"
      
      - name: update lambda with zip file
        if: ${{ inputs.zip_file }}
        shell: bash
        run: |
          echo "update lambda with zip file [${{ inputs.zip_file }}] --- coming soon"
         