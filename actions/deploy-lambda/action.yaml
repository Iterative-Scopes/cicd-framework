name: deploy lambda
description: update lambda with container, S3 or zip 

inputs:
  aws_account:
    description: aws account
    required: true
  aws_role:
    description: aws role
    required: true
  aws_region:
    description: aws region
    required: true
  lambda: 
    description: lambda name
    required: true

# lambda container for lambda code
  ecr_repository:
    description: aws repository
    required: false
  image_tag: 
    description: ecr container image tag
    default: latest
    required: false
# S3 uri for lambda code  
  s3_uri:
    description: S3 uri
    required: false

# zip file path for lambda code  
  zip_file:
    description: zip file path
    required: false

runs:
    using: "composite"
    steps: 
      - name: connect to AWS 
        uses: Iterative-Scopes/cicd-framework/actions/aws-login@main
        with:
          aws_region: ${{ inputs.aws_region }}  
          role_arn: arn:aws:iam::${{ inputs.aws_account }}:role/${{ inputs.aws_role }}
      
      - name: update container lambda - get image uri with given image tag
        if: ${{ inputs.ecr_repository &&  inputs.image_tag }}
        uses: Iterative-Scopes/cicd-framework/actions/get-ecr-image-uri@main
        id: get-image-uri
        with: 
          aws_account: ${{ inputs.aws_account }}
          aws_role: ${{ inputs.aws_role }}
          aws_region: ${{ inputs.aws_region }}
          ecr_repository: ${{ inputs.ecr_repository }}
          image_tag: ${{ inputs.image_tag }} 

      - name: update container lambda - update lambda with image uri
        if: ${{ steps.get-image-uri.outputs.uri }}
        shell: bash
        run: |
          echo ${{ steps.get-image-uri.outputs.uri }}
          aws lambda update-function-code --function-name ${{ inputs.lambda }} --image-uri ${{ steps.get-image-uri.outputs.uri }}
  
      - name: update lambda with S3
        if: ${{ inputs.s3_uri }}
        shell: bash
        run: |
          echo "update lambda with [${{ inputs.s3_uri }}] --- coming soon"
      
      - name: update lambda with zip file
        if: ${{ inputs.zip_file }}
        shell: bash
        run: |
          echo "update lambda with zip file [${{ inputs.zip_file }}] --- coming soon"
         